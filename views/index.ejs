<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>S&Co [Monitoring]</title>
		<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.28/css/uikit.min.css" />
        <style>
            .chartdiv { width:850px;height:500px;padding-top:20px; }
        </style>
	</head>
	<body style="font-family: 'Roboto', sans-serif;">


        <div class="uk-container">
            <h1>S&Co</h1>
            <hr>
            <% state.forEach((dev) => { %>
            <div class="uk-grid-small" uk-grid>
                <div class="uk-width-1-4@m">
                    <div class="uk-card uk-card-default uk-card-hover">
                        <div class="uk-card-media-top">
                            <% if (files[dev.iddev] && files[dev.iddev][0]) { %>
                                <img src="/photos/<%= dev.iddev %>/<%= files[dev.iddev][0] %>" alt="">
                            <% } %>
                        </div>
                        <div class="uk-card-body">
                            <% if (dev.status.event === "sleep") { %>
                                <h4 class="uk-margin-remove-bottom"><%= dev.location %></h4>
                                <p class="uk-text-meta uk-margin-remove-top">Режим: Энергосбережение</p>
                            <% } else if (dev.status.event === "wakeup") { %>
                                <div class="uk-card-badge uk-label">Online</div>
                                <h4 class="uk-margin-remove-bottom"><%= dev.location %></h4>
                                <p class="uk-text-meta uk-margin-remove-top">Режим: Работает</p>
                            <% } %>
                            <hr>
                            <%  const currentsens = sensors.filter((s) => {
                                    return (s.dev && s.dev === dev.iddev);
                                }).reverse()[0]
                                if (currentsens) {
                            %>
                                <p class="uk-text-meta uk-margin-remove-top">Показания от <%= new Date(currentsens.date).toLocaleString('ru').substring(5, 15) %></p>
                                <small><ul class="uk-list uk-list-divider uk-list-small">
                                <% if (currentsens.temp) { %>
                                    <li>Температура: <b><%= currentsens.temp %> &deg;C</b></li>
                                <% } %>
                                <% if (currentsens.press) { %>
                                    <li>Давление: <b><%= currentsens.press %> мм.</b></li>
                                <% } %>
                                <% if (currentsens.mic) { %>
                                    <li>Шум: <b><%= currentsens.mic %> ед.</b></li>
                                <% } %>
                                <% if (currentsens.gas1) { %>
                                    <li>Газы 1: <b><%= Math.round((currentsens.gas1[0] + currentsens.gas1[1] + currentsens.gas1[2] + currentsens.gas1[3]) / 4) %> ед.</b></li>
                                <% } %>
                                <% if (currentsens.charge) { %>
                                    <li>Заряд: <b><%= Math.round(currentsens.charge.toFixed(2) * 100) %> %</b></li>
                                <% } %>
                                </ul></small>
                             <%
                                }
                             %>
                        </div>
                    </div>
                </div>
                <div class="uk-width-3-4@m">
                    <div class="uk-card uk-card-small uk-card-default uk-card-body">
                        <div id="chartdiv-<%= dev.iddev %>" class="chartdiv"></div>
                    </div>
                </div>
            </div>
            <hr>
            <% }) %>
            <hr>
        </div>

        <div id="periodSelector" style="position:fixed;width:170px;height:400px;bottom:50px;right:10px;">
            <div class="uk-card uk-card-small uk-card-default uk-card-hover uk-card-body uk-box-shadow-large">
                
                <button class="uk-button uk-button-default uk-width-1-1" id="zb0" onclick="zoomCharts(0)">День</button>
                <button class="uk-button uk-button-default uk-width-1-1" id="zb7" onclick="zoomCharts(7)">Неделя</button>
                <button class="uk-button uk-button-default uk-width-1-1" id="zb30" onclick="zoomCharts(30)">Месяц</button>
                <button class="uk-button uk-button-default uk-width-1-1" id="zb365" onclick="zoomCharts(365)">Максимум</button>
            </div>
        </div>

        <div style="display:none">
            <div uk-lightbox>
                <a class="uk-button uk-button-default" id="openLBbutton" href="" caption=""></a>
            </div>
        </div>
	</body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.28/js/uikit.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.28/js/uikit-icons.min.js"></script>
    <script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
    <script src="https://www.amcharts.com/lib/3/serial.js"></script>
    <script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
    <script src="https:////www.amcharts.com/lib/3/lang/ru.js"></script>
    <script>
let tmpfiles = <%- JSON.stringify(files) %>
let tmpsensors = <%- JSON.stringify(sensors) %>
tmpsensors = tmpsensors.map((sensor) => {
    if (sensor.date) { sensor.date = new Date(sensor.date) }
    if (sensor.gas1) {
        sensor.gas1 = Math.round((sensor.gas1[0] + sensor.gas1[1] + sensor.gas1[2] + sensor.gas1[3]) / 4)
    }
    if (sensor.charge) { sensor.charge = Math.round(sensor.charge.toFixed(2) * 100) }
    sensor.imageValue = 1;
    let imglink = tmpfiles[sensor.dev].filter((f) => {
        return f.indexOf(sensor.date.toJSON().substring(0, 15)) == 0 
    })[0];
    sensor.image = '/photos/' + sensor.dev + '/' + imglink;
    return sensor;
})

const sensors = {}
let tmpsens = {};
tmpsensors.forEach((sensor) => {
    if (sensor.dev) {
        tmpsens = {}
        Object.assign(tmpsens, sensor)
        delete tmpsens.dev
        if (sensors[sensor.dev] === undefined) {
            sensors[sensor.dev] = []
        }
        sensors[sensor.dev].push(tmpsens)
    }
})

const charts = {}
let zoomCharts;
AmCharts.ready(() => {

    for (let dev in sensors) {
        charts[dev] = AmCharts.makeChart(
            "chartdiv-" + dev,
            {
                "type": "serial",
                "theme": "light",
                "language": "ru",
                "legend": {
                    "useGraphSettings": true,
                    "labelWidth": 120,
                    "align": "center"
                },
                "dataProvider": sensors[dev],
                "synchronizeGrid": true,
                "fontFamily": "Roboto",
                "valueAxes": [{
                    "id":"vtemp",
                    "axisColor": "#FF6600",
                    "axisThickness": 2,
                    "axisAlpha": 1,
                    "position": "left"
                }, {
                    "id":"vpress",
                    "axisColor": "#FCD202",
                    "axisThickness": 2,
                    "offset": 50,
                    "axisAlpha": 1,
                    "position": "left"
                }, {
                    "id":"vmic",
                    "axisColor": "#B0DE09",
                    "axisThickness": 2,
                    "axisAlpha": 1,
                    "position": "right"
                }, {
                    "id":"vgas1",
                    "axisColor": "#828282",
                    "axisThickness": 2,
                    "offset": 50,
                    "axisAlpha": 1,
                    "position": "right"
                }, {
                    "id":"vcharge",
                    "axisColor": "#5339BA",
                    "axisThickness": 2,
                    "offset": 100,
                    "axisAlpha": 1,
                    "position": "right",
                    "minimum": 0,
                    "maximum": 100,
                    "unit": "%",
                }],
                "graphs": [{
                    "valueAxis": "vtemp",
                    "balloonText": "[[value]] °C",
                    "legendValueText": "[[value]] °C",
                    "lineColor": "#FF6600",
                    "bullet": "round",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "title": "Температура",
                    "valueField": "temp",
                    "type": "line",
                    "fillAlphas": 0,
                }, {
                    "valueAxis": "vpress",
                    "balloonText": "[[value]] мрс",
                    "legendValueText": "[[value]] мрс",
                    "lineColor": "#FCD202",
                    "bullet": "round",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "title": "Давление",
                    "valueField": "press",
                    "type": "line",
                    "fillAlphas": 0
                }, {
                    "valueAxis": "vmic",
                    "balloonText": "[[value]] ед.",
                    "legendValueText": "[[value]] ед.",
                    "lineColor": "#B0DE09",
                    "bullet": "round",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "title": "Шум",
                    "valueField": "mic",
                    "type": "line",
                    "fillAlphas": 0
                }, {
                    "valueAxis": "vgas1",
                    "balloonText": "[[value]] ppm",
                    "legendValueText": "[[value]] ppm",
                    "lineColor": "#828282",
                    "bullet": "round",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "title": "Газы 1",
                    "valueField": "gas1",
                    "type": "line",
                    "fillAlphas": 0
                }, {
                    "valueAxis": "vcharge",
                    "balloonText": "[[value]] %",
                    "legendValueText": "[[value]] %",
                    "lineColor": "#5339BA",
                    "bullet": "round",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "title": "Заряд",
                    "valueField": "charge",
                    "type": "line",
                    "fillAlphas": 0,
                    "hidden": true,
                },{
                    //"valueAxis": "v4",
                    "bullet": "custom",
                    "lineAlpha": 0,
                    "showBalloon": false,
                    "bulletSize": 80,
                    "bulletOffset": 365,
                    "customBulletField": "image",
                    "bulletBorderThickness": 1,
                    "hideBulletsCount": 30,
                    "valueField": "imageValue",
                    "fillAlphas": 0,
                    "visibleInLegend": false,
                    "stackable": false,
                }],
                //"chartScrollbar": {},
                "chartCursor": {
                    "cursorPosition": "mouse",
                    "selectWithoutZooming": true,
                    "categoryBalloonDateFormat": "MMM DD JJ:NN",
                    "cursorColor": "#444444"
                },
                "startDuration": 0.5,
                "categoryField": "date",
                "categoryAxis": {
                    "parseDates": true,
                    "axisColor": "#DADADA",
                    "minPeriod": "ss",
                },
                "listeners": [{
                    "event": "clickGraphItem",
                    "method": function(event) {
                      openLB(event.item.dataContext);
                    }
                }]
            }
        );
    }

    const endday = new Date();
    endday.setHours(23, 59, 59);
    for (let ch in charts) {
        charts[ch].dataProvider.push({"date": endday});
        charts[ch].validateData();
    }
    zoomCharts = (days) => {
        let startday = new Date();
        startday.setHours(0, 0, 0);
        if (days && days > 0) {
            startday = new Date(startday - 1000 * 60 * 60 * 24 * days)
        }
        for (let ch in charts) {
            charts[ch].zoomToDates(startday, endday);
        }
        $('#periodSelector .uk-button-primary').addClass('uk-button-default');
        $('#periodSelector .uk-button-primary').removeClass('uk-button-primary');
        $('#zb'+days).removeClass('uk-button-default');
        $('#zb'+days).addClass('uk-button-primary');
    }
    zoomCharts(0);

    
});

const openLB = (data) => {
    console.log(data);
    $('#openLBbutton').attr("href", data.image);
    $('#openLBbutton').attr("caption", data.date.toLocaleString('ru'));
    $('#openLBbutton').click();
}

    </script>
</html>
